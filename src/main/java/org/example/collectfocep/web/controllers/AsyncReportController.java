package org.example.collectfocep.web.controllers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.services.impl.AsyncReportService;
import org.example.collectfocep.security.service.SecurityService;
import org.example.collectfocep.util.ApiResponse;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.YearMonth;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/async-reports")
@Slf4j
@RequiredArgsConstructor
public class AsyncReportController {

    private final AsyncReportService asyncReportService;
    private final SecurityService securityService;

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT MENSUEL
     */
    @PostMapping("/monthly")
    @PreAuthorize("@securityService.canAccessCollecteur(authentication, #collecteurId)")
    public ResponseEntity<ApiResponse<String>> generateMonthlyReportAsync(
            @RequestParam Long collecteurId,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth month) {

        log.info("üöÄ Demande g√©n√©ration rapport mensuel asynchrone - Collecteur: {}, Mois: {}", collecteurId, month);

        try {
            // ‚úÖ V√âRIFICATION DE S√âCURIT√â
            Long currentUserAgenceId = securityService.getCurrentUserAgenceId();
            if (currentUserAgenceId == null) {
                return ResponseEntity.status(403)
                        .body(ApiResponse.error("Acc√®s non autoris√©"));
            }

            // ‚úÖ V√âRIFIER LA DISPONIBILIT√â DU SERVICE
            if (!asyncReportService.isServiceAvailable()) {
                return ResponseEntity.status(503)
                        .body(ApiResponse.error("Service de g√©n√©ration de rapports temporairement indisponible"));
            }

            // ‚úÖ G√âN√âRER UN ID DE SUIVI UNIQUE
            String trackingId = UUID.randomUUID().toString();

            // ‚úÖ D√âMARRER LA G√âN√âRATION ASYNCHRONE
            CompletableFuture<String> futureReport = asyncReportService.generateMonthlyReport(collecteurId, month);

            // ‚úÖ G√âRER LE R√âSULTAT DE MANI√àRE ASYNCHRONE
            futureReport.whenComplete((result, throwable) -> {
                if (throwable != null) {
                    log.error("‚ùå Erreur g√©n√©ration rapport {}: {}", trackingId, throwable.getMessage());
                } else {
                    log.info("‚úÖ Rapport {} g√©n√©r√© avec succ√®s: {}", trackingId, result);
                }
            });

            // ‚úÖ RETOURNER IMM√âDIATEMENT AVEC L'ID DE SUIVI
            return ResponseEntity.accepted()
                    .body(ApiResponse.success(trackingId, "G√©n√©ration d√©marr√©e. Utilisez l'ID pour suivre le progr√®s."));

        } catch (Exception e) {
            log.error("‚ùå Erreur d√©marrage g√©n√©ration rapport mensuel", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur lors du d√©marrage de la g√©n√©ration: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT ANNUEL
     */
    @PostMapping("/annual")
    @PreAuthorize("@securityService.canAccessCollecteur(authentication, #collecteurId)")
    public ResponseEntity<ApiResponse<String>> generateAnnualReportAsync(
            @RequestParam Long collecteurId,
            @RequestParam int year) {

        log.info("üöÄ Demande g√©n√©ration rapport annuel asynchrone - Collecteur: {}, Ann√©e: {}", collecteurId, year);

        try {
            // ‚úÖ VALIDATION DE L'ANN√âE
            int currentYear = java.time.Year.now().getValue();
            if (year < 2020 || year > currentYear + 1) {
                return ResponseEntity.badRequest()
                        .body(ApiResponse.error("Ann√©e invalide: " + year + " (autoris√©e: 2020-" + (currentYear + 1) + ")"));
            }

            String trackingId = UUID.randomUUID().toString();

            // ‚úÖ D√âMARRER LA G√âN√âRATION ASYNCHRONE
            CompletableFuture<String> futureReport = asyncReportService.generateAnnualReport(collecteurId, year);

            futureReport.whenComplete((result, throwable) -> {
                if (throwable != null) {
                    log.error("‚ùå Erreur g√©n√©ration rapport annuel {}: {}", trackingId, throwable.getMessage());
                } else {
                    log.info("‚úÖ Rapport annuel {} g√©n√©r√©: {}", trackingId, result);
                }
            });

            return ResponseEntity.accepted()
                    .body(ApiResponse.success(trackingId,
                            String.format("G√©n√©ration rapport annuel %d d√©marr√©e (12 mois)", year)));

        } catch (Exception e) {
            log.error("‚ùå Erreur d√©marrage g√©n√©ration rapport annuel", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT PERSONNALIS√â
     */
    @PostMapping("/custom")
    @PreAuthorize("@securityService.canAccessCollecteur(authentication, #collecteurId)")
    public ResponseEntity<ApiResponse<String>> generateCustomReportAsync(
            @RequestParam Long collecteurId,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth startMonth,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth endMonth) {

        log.info("üöÄ G√©n√©ration rapport personnalis√© - Collecteur: {}, P√©riode: {} √† {}",
                collecteurId, startMonth, endMonth);

        try {
            // ‚úÖ VALIDATION DE LA P√âRIODE
            if (startMonth.isAfter(endMonth)) {
                return ResponseEntity.badRequest()
                        .body(ApiResponse.error("La date de d√©but doit √™tre ant√©rieure √† la date de fin"));
            }

            // ‚úÖ LIMITATION DE LA P√âRIODE (max 24 mois)
            long monthsBetween = java.time.temporal.ChronoUnit.MONTHS.between(startMonth, endMonth);
            if (monthsBetween > 24) {
                return ResponseEntity.badRequest()
                        .body(ApiResponse.error("P√©riode trop longue (maximum 24 mois, demand√©: " + (monthsBetween + 1) + " mois)"));
            }

            String trackingId = UUID.randomUUID().toString();

            // ‚úÖ D√âMARRER LA G√âN√âRATION ASYNCHRONE
            CompletableFuture<String> futureReport = asyncReportService.generateCustomReport(
                    collecteurId, startMonth, endMonth);

            futureReport.whenComplete((result, throwable) -> {
                if (throwable != null) {
                    log.error("‚ùå Erreur g√©n√©ration rapport personnalis√© {}: {}", trackingId, throwable.getMessage());
                } else {
                    log.info("‚úÖ Rapport personnalis√© {} g√©n√©r√©: {}", trackingId, result);
                }
            });

            return ResponseEntity.accepted()
                    .body(ApiResponse.success(trackingId,
                            String.format("G√©n√©ration rapport personnalis√© d√©marr√©e (%d mois)", monthsBetween + 1)));

        } catch (Exception e) {
            log.error("‚ùå Erreur d√©marrage g√©n√©ration rapport personnalis√©", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ G√âN√âRATION SYNCHRONE RAPIDE (pour petits rapports)
     */
    @PostMapping("/quick")
    @PreAuthorize("@securityService.canAccessCollecteur(authentication, #collecteurId)")
    public ResponseEntity<ApiResponse<String>> generateQuickReport(
            @RequestParam Long collecteurId,
            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth month) {

        log.info("‚ö° G√©n√©ration rapport rapide - Collecteur: {}, Mois: {}", collecteurId, month);

        try {
            // ‚úÖ G√âN√âRER LE RAPPORT DIRECTEMENT (SYNCHRONE)
            String reportPath = asyncReportService.generateQuickReport(collecteurId, month);

            return ResponseEntity.ok()
                    .body(ApiResponse.success(reportPath, "Rapport g√©n√©r√© imm√©diatement"));

        } catch (Exception e) {
            log.error("‚ùå Erreur g√©n√©ration rapport rapide", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur g√©n√©ration rapport rapide: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ V√âRIFICATION DU STATUT D'UN RAPPORT - CORRIG√â
     */
    @GetMapping("/status/{trackingId}")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN', 'COLLECTEUR')")
    public ResponseEntity<ApiResponse<AsyncReportService.AsyncReportStatus>> getReportStatus(
            @PathVariable String trackingId) {

        log.info("üìä V√©rification statut rapport: {}", trackingId);

        try {
            // ‚úÖ UTILISER LA BONNE CLASSE AsyncReportStatus
            CompletableFuture<AsyncReportService.AsyncReportStatus> futureStatus =
                    asyncReportService.getReportStatus(trackingId);

            AsyncReportService.AsyncReportStatus status = futureStatus.get();

            return ResponseEntity.ok(ApiResponse.success(status, "Statut r√©cup√©r√©"));

        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration statut rapport {}: {}", trackingId, e.getMessage());

            // ‚úÖ CR√âER UN STATUT D'ERREUR
            AsyncReportService.AsyncReportStatus errorStatus = AsyncReportService.AsyncReportStatus.builder()
                    .reportId(trackingId)
                    .status("ERROR")
                    .progress(0)
                    .message("Erreur lors de la r√©cup√©ration du statut: " + e.getMessage())
                    .build();

            return ResponseEntity.ok(ApiResponse.success(errorStatus, "Statut d'erreur"));
        }
    }

    /**
     * ‚úÖ NETTOYAGE DES ANCIENS RAPPORTS
     */
    @PostMapping("/cleanup")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN')")
    public ResponseEntity<ApiResponse<String>> cleanupOldReports(
            @RequestParam(defaultValue = "30") int daysOld) {

        log.info("üßπ Demande nettoyage rapports de plus de {} jours", daysOld);

        try {
            if (daysOld < 7) {
                return ResponseEntity.badRequest()
                        .body(ApiResponse.error("Minimum 7 jours pour le nettoyage (s√©curit√©)"));
            }

            String cleanupId = UUID.randomUUID().toString();

            // ‚úÖ D√âMARRER LE NETTOYAGE ASYNCHRONE
            CompletableFuture<Integer> futureCleanup = asyncReportService.cleanupOldReports(daysOld);

            futureCleanup.whenComplete((cleanedCount, throwable) -> {
                if (throwable != null) {
                    log.error("‚ùå Erreur nettoyage {}: {}", cleanupId, throwable.getMessage());
                } else {
                    log.info("‚úÖ Nettoyage {} termin√©: {} rapports supprim√©s", cleanupId, cleanedCount);
                }
            });

            return ResponseEntity.accepted()
                    .body(ApiResponse.success(cleanupId,
                            String.format("Nettoyage des rapports > %d jours d√©marr√©", daysOld)));

        } catch (Exception e) {
            log.error("‚ùå Erreur d√©marrage nettoyage", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur nettoyage: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ V√âRIFICATION DE LA SANT√â DU SERVICE
     */
    @GetMapping("/health")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN')")
    public ResponseEntity<ApiResponse<String>> checkServiceHealth() {
        log.info("üîç V√©rification sant√© du service AsyncReport");

        try {
            boolean available = asyncReportService.isServiceAvailable();

            if (available) {
                return ResponseEntity.ok()
                        .body(ApiResponse.success("HEALTHY", "Service de g√©n√©ration de rapports op√©rationnel"));
            } else {
                return ResponseEntity.status(503)
                        .body(ApiResponse.error("Service de g√©n√©ration de rapports indisponible"));
            }

        } catch (Exception e) {
            log.error("‚ùå Erreur v√©rification sant√© service", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur v√©rification: " + e.getMessage()));
        }
    }

    /**
     * ‚úÖ LISTE DES RAPPORTS EN COURS - AM√âLIOR√âE
     */
    @GetMapping("/active")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN')")
    public ResponseEntity<ApiResponse<String>> getActiveReports() {
        log.info("üìã R√©cup√©ration des rapports en cours");

        try {
            // TODO: Impl√©menter la r√©cup√©ration des rapports actifs
            String message = "Fonctionnalit√© de suivi des rapports actifs en d√©veloppement.\n" +
                    "Service disponible: " + asyncReportService.isServiceAvailable();

            return ResponseEntity.ok(ApiResponse.success(message));

        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration rapports actifs", e);
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Erreur: " + e.getMessage()));
        }
    }
}