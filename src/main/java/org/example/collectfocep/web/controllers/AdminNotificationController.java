package org.example.collectfocep.web.controllers;

import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.entities.AdminNotification;
import org.example.collectfocep.services.impl.AdminNotificationService;
import org.example.collectfocep.dto.AdminDashboardActivities;
import org.example.collectfocep.security.service.SecurityService;
import org.example.collectfocep.util.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/admin/notifications")
@PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
@Slf4j
public class AdminNotificationController {

    private final AdminNotificationService adminNotificationService;
    private final SecurityService securityService;

    @Autowired
    public AdminNotificationController(AdminNotificationService adminNotificationService,
                                       SecurityService securityService) {
        this.adminNotificationService = adminNotificationService;
        this.securityService = securityService;
    }

    /**
     * üìä Dashboard notifications avec ton service getDashboardActivities
     */
    @GetMapping("/dashboard")
    public ResponseEntity<ApiResponse<AdminDashboardActivities>> getDashboard(
            @RequestParam(defaultValue = "60") int lastMinutes) {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.info("üìä R√©cup√©ration dashboard admin: adminId={}, lastMinutes={}", adminId, lastMinutes);

            AdminDashboardActivities dashboard = adminNotificationService.getDashboardActivities(adminId, lastMinutes);

            return ResponseEntity.ok(ApiResponse.success(dashboard, "Dashboard r√©cup√©r√© avec succ√®s"));

        } catch (Exception e) {
            log.error("‚ùå Erreur dashboard admin: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("Erreur lors du chargement du dashboard"));
        }
    }

    /**
     * üö® Notifications critiques avec ton service getCriticalNotifications
     */
    @GetMapping("/critical")
    public ResponseEntity<ApiResponse<List<AdminNotification>>> getCriticalNotifications() {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.info("üö® R√©cup√©ration notifications critiques: adminId={}", adminId);

            List<AdminNotification> notifications = adminNotificationService.getCriticalNotifications(adminId);

            return ResponseEntity.ok(ApiResponse.success(notifications, "Notifications critiques r√©cup√©r√©es"));

        } catch (Exception e) {
            log.error("‚ùå Erreur notifications critiques: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("Erreur lors de la r√©cup√©ration des notifications critiques"));
        }
    }

    /**
     * ‚úÖ Marquer notification comme lue avec ton service markAsRead
     */
    @PutMapping("/{id}/read")
    public ResponseEntity<ApiResponse<String>> markAsRead(@PathVariable Long id) {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.info("‚úÖ Marquer notification comme lue: notificationId={}, adminId={}", id, adminId);

            adminNotificationService.markAsRead(id, adminId);

            return ResponseEntity.ok(ApiResponse.success("OK", "Notification marqu√©e comme lue"));

        } catch (Exception e) {
            log.error("‚ùå Erreur marquage lecture: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(ApiResponse.error("Erreur lors du marquage de la notification"));
        }
    }

    /**
     * üìã Toutes les notifications d'un admin (avec pagination future si besoin)
     */
    @GetMapping("/all")
    public ResponseEntity<ApiResponse<List<AdminNotification>>> getAllNotifications() {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.info("üìã R√©cup√©ration toutes notifications: adminId={}", adminId);

            // Tu peux ajouter cette m√©thode √† ton service
            List<AdminNotification> notifications = adminNotificationService.getAllNotifications(adminId);

            return ResponseEntity.ok(ApiResponse.success(notifications, "Toutes les notifications r√©cup√©r√©es"));

        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration notifications: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("Erreur lors de la r√©cup√©ration des notifications"));
        }
    }

    /**
     * üî¢ Compter notifications non lues
     */
    @GetMapping("/unread-count")
    public ResponseEntity<ApiResponse<Long>> getUnreadCount() {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.debug("üî¢ Comptage notifications non lues: adminId={}", adminId);

            // Tu peux ajouter cette m√©thode √† ton service
            Long count = adminNotificationService.getUnreadCount(adminId);

            return ResponseEntity.ok(ApiResponse.success(count, "Nombre de notifications non lues"));

        } catch (Exception e) {
            log.error("‚ùå Erreur comptage notifications: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.error("Erreur lors du comptage"));
        }
    }

    /**
     * üóëÔ∏è Marquer toutes les notifications comme lues
     */
    @PutMapping("/read-all")
    public ResponseEntity<ApiResponse<String>> markAllAsRead() {
        try {
            Long adminId = securityService.getCurrentUserId();
            log.info("üóëÔ∏è Marquer toutes notifications comme lues: adminId={}", adminId);

            // Tu peux ajouter cette m√©thode √† ton service
            adminNotificationService.markAllAsRead(adminId);

            return ResponseEntity.ok(ApiResponse.success("OK", "Toutes les notifications marqu√©es comme lues"));

        } catch (Exception e) {
            log.error("‚ùå Erreur marquage global: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(ApiResponse.error("Erreur lors du marquage global"));
        }
    }
}