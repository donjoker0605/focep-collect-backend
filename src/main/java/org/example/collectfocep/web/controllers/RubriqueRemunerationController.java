package org.example.collectfocep.web.controllers;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.dto.RubriqueRemunerationDTO;
import org.example.collectfocep.entities.RubriqueRemuneration;
import org.example.collectfocep.repositories.RubriqueRemunerationRepository;
import org.example.collectfocep.util.ApiResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/**
 * Contr√¥leur REST pour la gestion des rubriques de r√©mun√©ration FOCEP v2
 * Permet de configurer les param√®tres Vi pour le calcul des r√©mun√©rations
 */
@RestController
@RequestMapping("/api/v2/rubriques-remuneration")
@RequiredArgsConstructor
@Slf4j
@PreAuthorize("hasRole('ADMIN') or hasRole('SUPER_ADMIN')")
public class RubriqueRemunerationController {

    private final RubriqueRemunerationRepository rubriqueRepository;

    /**
     * R√©cup√®re les rubriques actives pour un collecteur
     * 
     * @param collecteurId ID du collecteur
     * @return Liste des rubriques applicables
     */
    @GetMapping("/collecteur/{collecteurId}")
    public ResponseEntity<ApiResponse<List<RubriqueRemuneration>>> getRubriquesByCollecteur(
            @PathVariable Long collecteurId) {
        try {
            log.info("üìã R√©cup√©ration rubriques pour collecteur: {}", collecteurId);
            
            List<RubriqueRemuneration> rubriques = rubriqueRepository
                    .findActiveRubriquesByCollecteurId(collecteurId);
            
            log.info("‚úÖ {} rubriques trouv√©es pour collecteur {}", rubriques.size(), collecteurId);
            
            return ResponseEntity.ok(
                ApiResponse.success(
                    rubriques, 
                    String.format("%d rubriques actives trouv√©es", rubriques.size())
                )
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration rubriques collecteur {}: {}", collecteurId, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la r√©cup√©ration des rubriques"));
        }
    }

    /**
     * R√©cup√®re toutes les rubriques (pour admin)
     * 
     * @return Liste de toutes les rubriques
     */
    @GetMapping
    public ResponseEntity<ApiResponse<List<RubriqueRemuneration>>> getAllRubriques() {
        try {
            log.info("üìã R√©cup√©ration de toutes les rubriques");
            
            List<RubriqueRemuneration> rubriques = rubriqueRepository.findAll();
            
            return ResponseEntity.ok(
                ApiResponse.success(
                    rubriques, 
                    String.format("%d rubriques trouv√©es", rubriques.size())
                )
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration toutes rubriques: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la r√©cup√©ration des rubriques"));
        }
    }

    /**
     * R√©cup√®re une rubrique par son ID
     * 
     * @param id ID de la rubrique
     * @return Rubrique trouv√©e
     */
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<RubriqueRemuneration>> getRubriqueById(@PathVariable Long id) {
        try {
            log.info("üîç R√©cup√©ration rubrique ID: {}", id);
            
            Optional<RubriqueRemuneration> rubrique = rubriqueRepository.findById(id);
            
            if (rubrique.isEmpty()) {
                return ResponseEntity.notFound().build();
            }
            
            return ResponseEntity.ok(
                ApiResponse.success(rubrique.get(), "Rubrique trouv√©e")
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur r√©cup√©ration rubrique {}: {}", id, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la r√©cup√©ration de la rubrique"));
        }
    }

    /**
     * Cr√©e une nouvelle rubrique de r√©mun√©ration
     * 
     * @param rubriqueDTO Donn√©es de la rubrique
     * @return Rubrique cr√©√©e
     */
    @PostMapping
    public ResponseEntity<ApiResponse<RubriqueRemuneration>> createRubrique(
            @RequestBody RubriqueRemunerationDTO rubriqueDTO) {
        try {
            log.info("‚ûï Cr√©ation rubrique: {}", rubriqueDTO.getNom());
            
            // Validation basique
            if (rubriqueDTO.getNom() == null || rubriqueDTO.getNom().trim().isEmpty()) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.error("Le nom de la rubrique est requis"));
            }
            
            if (rubriqueDTO.getType() == null) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.error("Le type de rubrique est requis"));
            }
            
            if (rubriqueDTO.getValeur() == null || rubriqueDTO.getValeur().compareTo(java.math.BigDecimal.ZERO) <= 0) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.error("La valeur doit √™tre positive"));
            }
            
            // Conversion DTO vers Entity
            RubriqueRemuneration rubrique = RubriqueRemuneration.builder()
                .nom(rubriqueDTO.getNom().trim())
                .type(rubriqueDTO.getType())
                .valeur(rubriqueDTO.getValeur())
                .dateApplication(rubriqueDTO.getDateApplication())
                .delaiJours(rubriqueDTO.getDelaiJours())
                .collecteurIds(rubriqueDTO.getCollecteurIds())
                .active(true)
                .build();
            
            RubriqueRemuneration savedRubrique = rubriqueRepository.save(rubrique);
            
            log.info("‚úÖ Rubrique cr√©√©e avec ID: {}", savedRubrique.getId());
            
            return ResponseEntity.ok(
                ApiResponse.success(savedRubrique, "Rubrique cr√©√©e avec succ√®s")
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur cr√©ation rubrique: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la cr√©ation de la rubrique"));
        }
    }

    /**
     * Met √† jour une rubrique existante
     * 
     * @param id ID de la rubrique
     * @param rubriqueDTO Nouvelles donn√©es
     * @return Rubrique mise √† jour
     */
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<RubriqueRemuneration>> updateRubrique(
            @PathVariable Long id,
            @RequestBody RubriqueRemunerationDTO rubriqueDTO) {
        try {
            log.info("‚úèÔ∏è Mise √† jour rubrique ID: {}", id);
            
            Optional<RubriqueRemuneration> existingRubrique = rubriqueRepository.findById(id);
            
            if (existingRubrique.isEmpty()) {
                return ResponseEntity.notFound().build();
            }
            
            RubriqueRemuneration rubrique = existingRubrique.get();
            
            // Mise √† jour des champs
            if (rubriqueDTO.getNom() != null) {
                rubrique.setNom(rubriqueDTO.getNom().trim());
            }
            
            if (rubriqueDTO.getType() != null) {
                rubrique.setType(rubriqueDTO.getType());
            }
            
            if (rubriqueDTO.getValeur() != null) {
                rubrique.setValeur(rubriqueDTO.getValeur());
            }
            
            if (rubriqueDTO.getDateApplication() != null) {
                rubrique.setDateApplication(rubriqueDTO.getDateApplication());
            }
            
            if (rubriqueDTO.getDelaiJours() != null) {
                rubrique.setDelaiJours(rubriqueDTO.getDelaiJours());
            }
            
            if (rubriqueDTO.getCollecteurIds() != null) {
                rubrique.setCollecteurIds(rubriqueDTO.getCollecteurIds());
            }
            
            RubriqueRemuneration savedRubrique = rubriqueRepository.save(rubrique);
            
            log.info("‚úÖ Rubrique {} mise √† jour", id);
            
            return ResponseEntity.ok(
                ApiResponse.success(savedRubrique, "Rubrique mise √† jour avec succ√®s")
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur mise √† jour rubrique {}: {}", id, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la mise √† jour de la rubrique"));
        }
    }

    /**
     * D√©sactive une rubrique (soft delete)
     * 
     * @param id ID de la rubrique
     * @return Confirmation de d√©sactivation
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<String>> deactivateRubrique(@PathVariable Long id) {
        try {
            log.info("‚ùå D√©sactivation rubrique ID: {}", id);
            
            Optional<RubriqueRemuneration> rubrique = rubriqueRepository.findById(id);
            
            if (rubrique.isEmpty()) {
                return ResponseEntity.notFound().build();
            }
            
            RubriqueRemuneration toDeactivate = rubrique.get();
            toDeactivate.setActive(false);
            
            rubriqueRepository.save(toDeactivate);
            
            log.info("‚úÖ Rubrique {} d√©sactiv√©e", id);
            
            return ResponseEntity.ok(
                ApiResponse.success("OK", "Rubrique d√©sactiv√©e avec succ√®s")
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur d√©sactivation rubrique {}: {}", id, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la d√©sactivation de la rubrique"));
        }
    }

    /**
     * R√©active une rubrique
     * 
     * @param id ID de la rubrique
     * @return Confirmation de r√©activation
     */
    @PostMapping("/{id}/activate")
    public ResponseEntity<ApiResponse<RubriqueRemuneration>> activateRubrique(@PathVariable Long id) {
        try {
            log.info("‚úÖ R√©activation rubrique ID: {}", id);
            
            Optional<RubriqueRemuneration> rubrique = rubriqueRepository.findById(id);
            
            if (rubrique.isEmpty()) {
                return ResponseEntity.notFound().build();
            }
            
            RubriqueRemuneration toActivate = rubrique.get();
            toActivate.setActive(true);
            
            RubriqueRemuneration savedRubrique = rubriqueRepository.save(toActivate);
            
            log.info("‚úÖ Rubrique {} r√©activ√©e", id);
            
            return ResponseEntity.ok(
                ApiResponse.success(savedRubrique, "Rubrique r√©activ√©e avec succ√®s")
            );
        } catch (Exception e) {
            log.error("‚ùå Erreur r√©activation rubrique {}: {}", id, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ApiResponse.error("Erreur lors de la r√©activation de la rubrique"));
        }
    }
}