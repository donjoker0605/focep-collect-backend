package org.example.collectfocep.services.interfaces;

import org.example.collectfocep.dto.*;
import org.example.collectfocep.entities.Collecteur;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public interface CollecteurService {

    // âœ… MÃ‰THODES PRINCIPALES - NOUVELLES ET SÃ‰CURISÃ‰ES

    /**
     * CrÃ©e un nouveau collecteur avec le mot de passe fourni
     */
    Collecteur saveCollecteur(CollecteurCreateDTO dto);

    /**
     * Met Ã  jour un collecteur existant
     */
    Collecteur updateCollecteur(Long id, CollecteurUpdateDTO dto);

    /**
     * ðŸ”¥ NOUVELLE: RÃ©initialise le mot de passe d'un collecteur par l'admin
     */
    void resetCollecteurPassword(Long collecteurId, String newPassword);

    /**
     * RÃ©cupÃ¨re les collecteurs filtrÃ©s par agence (avec sÃ©curitÃ©)
     */
    Page<Collecteur> getCollecteursByAgence(Long agenceId, Pageable pageable);

    /**
     * Recherche des collecteurs dans une agence
     */
    Page<Collecteur> searchCollecteursByAgence(Long agenceId, String search, Pageable pageable);

    /**
     * Bascule le statut actif/inactif d'un collecteur
     */
    Collecteur toggleCollecteurStatus(Long collecteurId);

    /**
     * RÃ©cupÃ¨re les statistiques d'un collecteur
     */
    CollecteurStatisticsDTO getCollecteurStatistics(Long collecteurId);

    // âœ… MÃ‰THODES EXISTANTES CONSERVÃ‰ES

    /**
     * Met Ã  jour le montant maximum de retrait
     */
    Collecteur updateMontantMaxRetrait(Long collecteurId, BigDecimal nouveauMontant, String justification);

    /**
     * RÃ©cupÃ¨re un collecteur par ID
     */
    Optional<Collecteur> getCollecteurById(Long id);

    /**
     * Convertit un collecteur en DTO
     */
    CollecteurDTO convertToDTO(Collecteur collecteur);

    /**
     * Trouve les collecteurs par agence
     */
    List<Collecteur> findByAgenceId(Long agenceId);

    /**
     * Trouve les collecteurs par agence avec pagination
     */
    Page<Collecteur> findByAgenceId(Long agenceId, Pageable pageable);

    /**
     * DÃ©sactive un collecteur (soft delete)
     */
    void deactivateCollecteur(Long id);

    /**
     * RÃ©cupÃ¨re tous les collecteurs
     */
    List<Collecteur> getAllCollecteurs();

    /**
     * RÃ©cupÃ¨re tous les collecteurs avec pagination
     */
    Page<Collecteur> getAllCollecteurs(Pageable pageable);

    /**
     * VÃ©rifie si un collecteur a des opÃ©rations actives
     */
    boolean hasActiveOperations(Collecteur collecteur);

    /**
     * RÃ©cupÃ¨re les statistiques du dashboard d'un collecteur
     */
    CollecteurDashboardDTO getDashboardStats(Long collecteurId);

    /**
     * ðŸ”¥ NOUVELLE: Statistiques avec plage de dates
     */
    Map<String, Object> getCollecteurStatisticsWithDateRange(Long collecteurId, LocalDate dateDebut, LocalDate dateFin);

    /**
     * ðŸ”¥ NOUVELLE: MÃ©triques de performance
     */
    Map<String, Object> getCollecteurPerformanceMetrics(Long collecteurId, LocalDate dateDebut, LocalDate dateFin);

    /**
     * ðŸ”¥ NOUVELLE: Mise Ã  jour du statut
     */
    void updateCollecteurStatus(Long collecteurId, Boolean active);

    // âœ… MÃ‰THODES DEPRECATED - CONSERVÃ‰ES POUR COMPATIBILITÃ‰

    @Deprecated
    Collecteur saveCollecteur(CollecteurDTO dto, Long agenceId);

    @Deprecated
    Collecteur saveCollecteur(Collecteur collecteur);

    @Deprecated
    Collecteur convertToEntity(CollecteurDTO dto);

    @Deprecated
    void updateCollecteurFromDTO(Collecteur collecteur, CollecteurDTO dto);

    @Deprecated
    Collecteur updateCollecteur(Collecteur collecteur);

    @Deprecated
    Collecteur updateCollecteur(Long id, CollecteurDTO dto);
}