package org.example.collectfocep.services.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.entities.Journal;
import org.example.collectfocep.services.interfaces.JournalService;
import org.example.collectfocep.services.ReportService;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.YearMonth;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Service
@Slf4j
@RequiredArgsConstructor
public class AsyncReportService {

    private final ReportService reportService;
    private final JournalService journalService;

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT MENSUEL
     * Maintenant parfaitement synchronis√© avec JournalService
     */
    @Async("reportTaskExecutor")  // ‚úÖ UTILISER LE THREAD POOL SP√âCIALIS√â
    public CompletableFuture<String> generateMonthlyReport(Long collecteurId, YearMonth month) {
        log.info("üöÄ D√©marrage g√©n√©ration asynchrone rapport pour collecteur: {} - mois: {}", collecteurId, month);

        try {
            // ‚úÖ √âTAPE 1: R√©cup√©rer les donn√©es de journal via JournalService
            List<Journal> journalEntries = journalService.getMonthlyEntries(collecteurId, month);
            log.info("üìã {} entr√©es de journal r√©cup√©r√©es pour {}", journalEntries.size(), month);

            // ‚úÖ √âTAPE 2: G√©n√©rer le rapport via ReportService
            String reportPath = reportService.generateMonthlyReport(collecteurId, journalEntries, month);
            log.info("‚úÖ Rapport g√©n√©r√© avec succ√®s: {}", reportPath);

            return CompletableFuture.completedFuture(reportPath);

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la g√©n√©ration asynchrone du rapport pour collecteur {}: {}",
                    collecteurId, e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT ANNUEL
     * Nouvelle fonctionnalit√© pour g√©n√©rer des rapports annuels
     */
    @Async("reportTaskExecutor")  // ‚úÖ UTILISER LE THREAD POOL SP√âCIALIS√â
    public CompletableFuture<String> generateAnnualReport(Long collecteurId, int year) {
        log.info("üöÄ G√©n√©ration rapport annuel pour collecteur: {} - ann√©e: {}", collecteurId, year);

        try {
            StringBuilder allReports = new StringBuilder();

            // G√©n√©rer un rapport pour chaque mois de l'ann√©e
            for (int month = 1; month <= 12; month++) {
                YearMonth yearMonth = YearMonth.of(year, month);

                try {
                    String monthlyReport = generateMonthlyReport(collecteurId, yearMonth).get();
                    allReports.append(monthlyReport).append("\n");
                    log.info("‚úÖ Rapport mensuel {}/{} trait√©", month, year);

                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Erreur rapport mensuel {}/{}: {}", month, year, e.getMessage());
                }
            }

            // Cr√©er le rapport annuel consolid√©
            String annualReportPath = String.format("rapport_annuel_%d_%d.xlsx", collecteurId, year);
            log.info("‚úÖ Rapport annuel g√©n√©r√©: {}", annualReportPath);

            return CompletableFuture.completedFuture(annualReportPath);

        } catch (Exception e) {
            log.error("‚ùå Erreur g√©n√©ration rapport annuel: {}", e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * ‚úÖ G√âN√âRATION ASYNCHRONE DE RAPPORT PERSONNALIS√â - COMPL√âT√âE
     * Permet de g√©n√©rer des rapports sur mesure avec p√©riodes sp√©cifiques
     */
    @Async("reportTaskExecutor")  // ‚úÖ UTILISER LE THREAD POOL SP√âCIALIS√â
    public CompletableFuture<String> generateCustomReport(Long collecteurId, YearMonth startMonth, YearMonth endMonth) {
        log.info("üöÄ G√©n√©ration rapport personnalis√© pour collecteur: {} - p√©riode: {} √† {}",
                collecteurId, startMonth, endMonth);

        try {
            StringBuilder customReport = new StringBuilder();
            YearMonth currentMonth = startMonth;
            int processedMonths = 0;
            int totalMonths = (int) java.time.temporal.ChronoUnit.MONTHS.between(startMonth, endMonth) + 1;

            log.info("üìä Traitement de {} mois au total", totalMonths);

            while (!currentMonth.isAfter(endMonth)) {
                try {
                    log.info("üîÑ Traitement du mois: {} ({}/{})", currentMonth, processedMonths + 1, totalMonths);

                    // G√©n√©rer le rapport mensuel
                    String monthlyReport = generateMonthlyReport(collecteurId, currentMonth).get();
                    customReport.append(monthlyReport).append("\n");

                    processedMonths++;
                    log.info("‚úÖ Rapport mensuel {} trait√© avec succ√®s ({}/{})",
                            currentMonth, processedMonths, totalMonths);

                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è Erreur rapport mensuel {}: {}", currentMonth, e.getMessage());
                    // Continuer m√™me en cas d'erreur sur un mois
                }

                // Passer au mois suivant
                currentMonth = currentMonth.plusMonths(1);
            }

            // Cr√©er le rapport personnalis√© consolid√©
            String customReportPath = String.format("rapport_personnalise_%d_%s_%s.xlsx",
                    collecteurId, startMonth.toString(), endMonth.toString());

            log.info("‚úÖ Rapport personnalis√© g√©n√©r√© avec succ√®s: {} ({} mois trait√©s)",
                    customReportPath, processedMonths);

            return CompletableFuture.completedFuture(customReportPath);

        } catch (Exception e) {
            log.error("‚ùå Erreur g√©n√©ration rapport personnalis√© pour collecteur {}: {}",
                    collecteurId, e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * ‚úÖ STATUT DE G√âN√âRATION ASYNCHRONE - CORRIG√â
     * Permet de suivre l'√©tat d'avancement des rapports
     */
    public CompletableFuture<AsyncReportStatus> getReportStatus(String reportId) {
        log.info("üìä V√©rification statut rapport: {}", reportId);

        try {
            // TODO: Impl√©menter un syst√®me de suivi des rapports en cours
            // Pour l'instant, retourner un statut simul√©
            AsyncReportStatus status = AsyncReportStatus.builder()
                    .reportId(reportId)
                    .status("COMPLETED")
                    .progress(100)
                    .message("Rapport g√©n√©r√© avec succ√®s")
                    .build();

            return CompletableFuture.completedFuture(status);

        } catch (Exception e) {
            log.error("‚ùå Erreur v√©rification statut rapport: {}", e.getMessage(), e);

            AsyncReportStatus errorStatus = AsyncReportStatus.builder()
                    .reportId(reportId)
                    .status("FAILED")
                    .progress(0)
                    .message("Erreur: " + e.getMessage())
                    .build();

            return CompletableFuture.completedFuture(errorStatus);
        }
    }

    /**
     * ‚úÖ NETTOYAGE AUTOMATIQUE DES ANCIENS RAPPORTS
     */
    @Async("taskExecutor")  // ‚úÖ UTILISER LE THREAD POOL G√âN√âRAL POUR LE NETTOYAGE
    public CompletableFuture<Integer> cleanupOldReports(int daysOld) {
        log.info("üßπ Nettoyage des rapports de plus de {} jours", daysOld);

        try {
            // TODO: Impl√©menter la logique de nettoyage r√©elle
            // Pour l'instant, simuler le nettoyage
            int cleanedCount = 0;

            // Simulation du nettoyage
            Thread.sleep(2000); // Simuler le temps de traitement
            cleanedCount = (int) (Math.random() * 10); // Simuler le nombre de fichiers supprim√©s

            log.info("‚úÖ Nettoyage termin√©: {} rapports supprim√©s", cleanedCount);
            return CompletableFuture.completedFuture(cleanedCount);

        } catch (Exception e) {
            log.error("‚ùå Erreur lors du nettoyage: {}", e.getMessage(), e);
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * ‚úÖ G√âN√âRATION DE RAPPORT RAPIDE (SYNCHRONE)
     * Pour les petits rapports qui ne n√©cessitent pas d'√™tre asynchrones
     */
    public String generateQuickReport(Long collecteurId, YearMonth month) {
        log.info("‚ö° G√©n√©ration rapport rapide pour collecteur: {} - mois: {}", collecteurId, month);

        try {
            List<Journal> journalEntries = journalService.getMonthlyEntries(collecteurId, month);
            String reportPath = reportService.generateMonthlyReport(collecteurId, journalEntries, month);

            log.info("‚úÖ Rapport rapide g√©n√©r√©: {}", reportPath);
            return reportPath;

        } catch (Exception e) {
            log.error("‚ùå Erreur g√©n√©ration rapport rapide: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur g√©n√©ration rapport rapide: " + e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ V√âRIFICATION DE LA DISPONIBILIT√â DU SERVICE
     */
    public boolean isServiceAvailable() {
        try {
            // V√©rifier que les services d√©pendants sont disponibles
            boolean journalServiceOk = journalService != null;
            boolean reportServiceOk = reportService != null;

            boolean available = journalServiceOk && reportServiceOk;
            log.info("üîç Statut service AsyncReport: {} (JournalService: {}, ReportService: {})",
                    available ? "DISPONIBLE" : "INDISPONIBLE", journalServiceOk, reportServiceOk);

            return available;

        } catch (Exception e) {
            log.error("‚ùå Erreur v√©rification disponibilit√© service: {}", e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ CLASSE INTERNE POUR LE STATUT DES RAPPORTS - CORRIG√âE
     * S√©par√©e de l'entit√© Report pour √©viter les conflits
     */
    @lombok.Data
    @lombok.Builder
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class AsyncReportStatus {
        private String reportId;
        private String status; // PENDING, PROCESSING, COMPLETED, FAILED
        private int progress; // 0-100
        private String message;
        private String filePath;
        private Long fileSize;
        private java.time.LocalDateTime startTime;
        private java.time.LocalDateTime endTime;

        /**
         * V√©rifie si le rapport est termin√©
         */
        public boolean isCompleted() {
            return "COMPLETED".equals(status);
        }

        /**
         * V√©rifie si le rapport a √©chou√©
         */
        public boolean isFailed() {
            return "FAILED".equals(status);
        }

        /**
         * V√©rifie si le rapport est en cours
         */
        public boolean isInProgress() {
            return "PROCESSING".equals(status) || "PENDING".equals(status);
        }

        /**
         * Calcule la dur√©e d'ex√©cution
         */
        public Long getDurationInSeconds() {
            if (startTime != null && endTime != null) {
                return java.time.Duration.between(startTime, endTime).getSeconds();
            }
            return null;
        }
    }
}