package org.example.collectfocep.services.impl;

import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.dto.JournalDTO;
import org.example.collectfocep.entities.Collecteur;
import org.example.collectfocep.entities.Journal;
import org.example.collectfocep.entities.Mouvement;
import org.example.collectfocep.exceptions.ResourceNotFoundException;
import org.example.collectfocep.repositories.CollecteurRepository;
import org.example.collectfocep.repositories.JournalRepository;
import org.example.collectfocep.repositories.MouvementRepository;
import org.example.collectfocep.services.interfaces.JournalService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

@Service
@Slf4j
public class JournalServiceImpl implements JournalService {

    private final JournalRepository journalRepository;
    private final MouvementRepository mouvementRepository;
    private final CollecteurRepository collecteurRepository;

    @Autowired
    public JournalServiceImpl(JournalRepository journalRepository,
                              MouvementRepository mouvementRepository,
                              CollecteurRepository collecteurRepository) {
        this.journalRepository = journalRepository;
        this.mouvementRepository = mouvementRepository;
        this.collecteurRepository = collecteurRepository;
    }

    /**
     * M√âTHODE PRINCIPALE CORRIG√âE: Journal automatique par jour
     * Cette m√©thode est appel√©e automatiquement lors de chaque op√©ration
     */
    @Override
    @Transactional(
            propagation = Propagation.REQUIRES_NEW,
            isolation = Isolation.READ_COMMITTED,
            rollbackFor = Exception.class
    )
    public Journal getOrCreateJournalDuJour(Long collecteurId, LocalDate date) {
        if (date == null) {
            date = LocalDate.now();
        }

        log.info("üîç Recherche/cr√©ation journal automatique - Collecteur: {}, Date: {}", collecteurId, date);

        // 1. V√©rifier que le collecteur existe
        Collecteur collecteur = collecteurRepository.findById(collecteurId)
                .orElseThrow(() -> new ResourceNotFoundException("Collecteur non trouv√©: " + collecteurId));

        // 2. Chercher un journal existant pour cette date (avec retry en cas de concurrence)
        Optional<Journal> journalExistant = journalRepository.findByCollecteurAndDate(collecteur, date);

        if (journalExistant.isPresent()) {
            Journal journal = journalExistant.get();
            log.info("‚úÖ Journal existant trouv√©: ID={}, Status={}", journal.getId(), journal.getStatut());
            return journal;
        }

        // 3. CR√âATION S√âCURIS√âE avec gestion des concurrence
        return creerJournalDuJourSecurise(collecteur, date);
    }

    /**
     * CR√âATION AUTOMATIQUE DU JOURNAL
     */
    private Journal creerJournalDuJourSecurise(Collecteur collecteur, LocalDate date) {
        try {
            // Double-check : v√©rifier encore une fois avant cr√©ation
            Optional<Journal> existingCheck = journalRepository.findByCollecteurAndDate(collecteur, date);
            if (existingCheck.isPresent()) {
                log.info("‚úÖ Journal cr√©√© par thread concurrent - Utilisation: {}", existingCheck.get().getId());
                return existingCheck.get();
            }

            // Cr√©er un nouveau journal
            String reference = genererReference(collecteur, date);

            Journal nouveauJournal = Journal.builder()
                    .collecteur(collecteur)
                    .dateDebut(date)
                    .dateFin(date)
                    .statut("OUVERT")
                    .estCloture(false)
                    .reference(reference)
                    .build();

            Journal journalSauvegarde = journalRepository.save(nouveauJournal);
            log.info("üÜï Nouveau journal cr√©√© avec succ√®s: ID={}, R√©f√©rence={}",
                    journalSauvegarde.getId(), reference);

            return journalSauvegarde;

        } catch (Exception e) {
            log.error("‚ùå Erreur cr√©ation journal pour collecteur {}: {}", collecteur.getId(), e.getMessage());

            // Derni√®re tentative de r√©cup√©ration si cr√©ation √©choue
            Optional<Journal> fallbackJournal = journalRepository.findByCollecteurAndDate(collecteur, date);
            if (fallbackJournal.isPresent()) {
                log.warn("‚ö†Ô∏è Utilisation journal existant apr√®s √©chec cr√©ation: {}", fallbackJournal.get().getId());
                return fallbackJournal.get();
            }

            throw new RuntimeException("Impossible de cr√©er ou r√©cup√©rer le journal du jour", e);
        }
    }

    /**
     * G√âN√âRATION DE R√âF√âRENCE UNIQUE
     */
    private String genererReference(Collecteur collecteur, LocalDate date) {
        return String.format("J-%s-%s-%s",
                collecteur.getAgence() != null ? collecteur.getAgence().getCodeAgence() : "DEFAULT",
                collecteur.getId(),
                date.format(DateTimeFormatter.ofPattern("yyyyMMdd")));
    }

    /**
     * R√âCUP√âRATION DU JOURNAL ACTUEL (aujourd'hui)
     */
    @Override
    @Cacheable(value = "journal-actuel", key = "#collecteurId")
    public Journal getJournalActif(Long collecteurId) {
        log.info("üìã R√©cup√©ration journal actif pour collecteur: {}", collecteurId);
        LocalDate aujourdhui = LocalDate.now();
        return getOrCreateJournalDuJour(collecteurId, aujourdhui);
    }

    /**
     * ‚úÖ M√âTHODE POUR AsyncReportService
     * R√©cup√®re les entr√©es mensuelles d'un journal pour un collecteur
     */
    @Override
    @Cacheable(value = "monthly-entries", key = "#collecteurId + '-' + #month")
    public List<Journal> getMonthlyEntries(Long collecteurId, YearMonth month) {
        log.info("üìã R√©cup√©ration des entr√©es mensuelles pour collecteur: {} - mois: {}", collecteurId, month);

        try {
            LocalDate startDate = month.atDay(1);
            LocalDate endDate = month.atEndOfMonth();

            // ‚úÖ UTILISER LA M√âTHODE EXISTANTE
            List<Journal> journals = journalRepository.findByCollecteurAndDateRange(collecteurId, startDate, endDate);

            log.info("‚úÖ {} entr√©es de journal trouv√©es pour {}/{}",
                    journals.size(), month.getMonthValue(), month.getYear());

            return journals;

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des entr√©es mensuelles: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur r√©cup√©ration entr√©es mensuelles: " + e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE POUR ReportService
     * Cr√©er un nouveau journal pour un collecteur (aujourd'hui par d√©faut)
     */
    @Override
    @Transactional
    public Journal createJournal(Long collecteurId) {
        log.info("üìã Cr√©ation d'un nouveau journal pour collecteur: {}", collecteurId);

        try {
            LocalDate aujourdhui = LocalDate.now();
            return getOrCreateJournalDuJour(collecteurId, aujourdhui);

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation du journal pour collecteur {}: {}", collecteurId, e.getMessage(), e);
            throw new RuntimeException("Erreur cr√©ation journal: " + e.getMessage(), e);
        }
    }

    /**
     * CL√îTURE AUTOMATIQUE DU JOURNAL
     */
    @Override
    @Transactional(
            propagation = Propagation.REQUIRES_NEW,
            rollbackFor = Exception.class
    )
    @CacheEvict(value = {"journal-actuel", "monthly-entries"}, key = "#collecteurId")
    public Journal cloturerJournalDuJour(Long collecteurId, LocalDate date) {
        log.info("üîí Cl√¥ture journal collecteur {} pour date {}", collecteurId, date);

        Collecteur collecteur = collecteurRepository.findById(collecteurId)
                .orElseThrow(() -> new ResourceNotFoundException("Collecteur non trouv√©: " + collecteurId));

        Journal journal = journalRepository.findByCollecteurAndDate(collecteur, date)
                .orElseThrow(() -> new ResourceNotFoundException("Journal non trouv√© pour cette date"));

        if (journal.isEstCloture()) {
            log.warn("‚ö†Ô∏è Journal d√©j√† cl√¥tur√©: {}", journal.getId());
            return journal;
        }

        journal.cloturerJournal();
        Journal journalCloture = journalRepository.save(journal);

        log.info("‚úÖ Journal cl√¥tur√© avec succ√®s: ID={}", journalCloture.getId());
        return journalCloture;
    }

    // =====================================
    // M√âTHODES EXISTANTES CONSERV√âES POUR COMPATIBILIT√â
    // =====================================

    @Override
    public List<Journal> getAllJournaux() {
        log.debug("üìã R√©cup√©ration de tous les journaux");
        return journalRepository.findAll();
    }

    @Override
    public Page<Journal> getAllJournaux(Pageable pageable) {
        log.debug("üìã R√©cup√©ration pagin√©e de tous les journaux");
        return journalRepository.findAll(pageable);
    }

    @Override
    @Cacheable(value = "journaux", key = "#id")
    public Optional<Journal> getJournalById(Long id) {
        log.debug("üìã R√©cup√©ration journal par ID: {}", id);
        return journalRepository.findById(id);
    }

    @Override
    @Transactional
    @CacheEvict(value = {"journaux", "journal-actuel", "monthly-entries"}, allEntries = true)
    public Journal saveJournal(Journal journal) {
        log.info("üíæ Sauvegarde journal: {}", journal.getId());
        return journalRepository.save(journal);
    }

    @Override
    @Transactional
    @CacheEvict(value = {"journaux", "journal-actuel", "monthly-entries"}, key = "#journalId")
    public Journal cloturerJournal(Long journalId) {
        log.info("üîí Cl√¥ture journal par ID: {}", journalId);

        Journal journal = journalRepository.findById(journalId)
                .orElseThrow(() -> new ResourceNotFoundException("Journal non trouv√©"));

        if (!journal.isEstCloture()) {
            journal.cloturerJournal();
            journal = journalRepository.save(journal);
            log.info("‚úÖ Journal {} cl√¥tur√© avec succ√®s", journalId);
        } else {
            log.warn("‚ö†Ô∏è Journal {} d√©j√† cl√¥tur√©", journalId);
        }

        return journal;
    }

    @Override
    @Cacheable(value = "journal-range", key = "#collecteurId + '-' + #dateDebut + '-' + #dateFin")
    public List<Journal> getJournauxByCollecteurAndDateRange(
            Long collecteurId, LocalDate dateDebut, LocalDate dateFin) {
        log.debug("üìã R√©cup√©ration journaux collecteur {} entre {} et {}", collecteurId, dateDebut, dateFin);
        return journalRepository.findByCollecteurAndDateRange(collecteurId, dateDebut, dateFin);
    }

    @Override
    public Page<Journal> getJournauxByCollecteurAndDateRange(
            Long collecteurId, LocalDate dateDebut, LocalDate dateFin, Pageable pageable) {
        log.debug("üìã R√©cup√©ration pagin√©e journaux collecteur {} entre {} et {}", collecteurId, dateDebut, dateFin);
        return journalRepository.findByCollecteurAndDateRange(collecteurId, dateDebut, dateFin, pageable);
    }

    @Override
    @Transactional
    @CacheEvict(value = {"journaux", "journal-actuel", "monthly-entries"}, allEntries = true)
    public void deleteJournal(Long id) {
        log.info("üóëÔ∏è Suppression journal: {}", id);

        Optional<Journal> journal = journalRepository.findById(id);
        if (journal.isPresent()) {
            if (journal.get().isEstCloture()) {
                throw new IllegalStateException("Impossible de supprimer un journal cl√¥tur√©");
            }
            journalRepository.deleteById(id);
            log.info("‚úÖ Journal {} supprim√© avec succ√®s", id);
        } else {
            log.warn("‚ö†Ô∏è Journal {} non trouv√© pour suppression", id);
        }
    }

    @Override
    @Transactional
    public Mouvement saveMouvement(Mouvement mouvement, Journal journal) {
        log.debug("üíæ Sauvegarde mouvement dans journal: {}", journal.getId());

        if (journal.isEstCloture()) {
            throw new IllegalStateException("Impossible d'ajouter un mouvement √† un journal cl√¥tur√©");
        }

        mouvement.setJournal(journal);
        return mouvementRepository.save(mouvement);
    }

    @Override
    @Cacheable(value = "journal-collecteur-range", key = "#collecteur.id + '-' + #dateDebut + '-' + #dateFin")
    public List<Journal> getJournauxByCollecteurAndDateRange(
            Collecteur collecteur, LocalDate dateDebut, LocalDate dateFin) {
        log.debug("üìã R√©cup√©ration journaux collecteur {} entre {} et {}", collecteur.getId(), dateDebut, dateFin);
        return journalRepository.findByCollecteurAndDateDebutBetween(collecteur, dateDebut, dateFin);
    }

    /**
     * ‚úÖ M√âTHODES UTILITAIRES POUR LE MONITORING
     */

    /**
     * Compte le nombre de journaux ouverts pour un collecteur
     */
    public long countJournauxOuverts(Long collecteurId) {
        return journalRepository.countByCollecteurIdAndEstClotureIsFalse(collecteurId);
    }

    /**
     * R√©cup√®re les journaux non cl√¥tur√©s depuis plus de X jours
     */
    public List<Journal> getJournauxNonCloturesAnciens(int nombreJours) {
        LocalDate seuilDate = LocalDate.now().minusDays(nombreJours);
        return journalRepository.findByEstClotureIsFalseAndDateDebutBefore(seuilDate);
    }

    /**
     * Cl√¥ture automatique des journaux anciens
     */
    @Transactional
    @CacheEvict(value = {"journal-actuel", "monthly-entries", "journaux"}, allEntries = true)
    public int cloturerJournauxAnciens(int nombreJours) {
        log.info("üîí Cl√¥ture automatique des journaux anciens (plus de {} jours)", nombreJours);

        List<Journal> journauxAnciens = getJournauxNonCloturesAnciens(nombreJours);
        int nombreClotures = 0;

        for (Journal journal : journauxAnciens) {
            try {
                if (!journal.isEstCloture()) {
                    journal.cloturerJournal();
                    journalRepository.save(journal);
                    nombreClotures++;
                    log.info("‚úÖ Journal {} cl√¥tur√© automatiquement", journal.getId());
                }
            } catch (Exception e) {
                log.error("‚ùå Erreur lors de la cl√¥ture automatique du journal {}: {}",
                        journal.getId(), e.getMessage());
            }
        }

        log.info("‚úÖ Cl√¥ture automatique termin√©e: {} journaux cl√¥tur√©s", nombreClotures);
        return nombreClotures;
    }

    @Override
    public Page<JournalDTO> getJournauxByCollecteurPaginated(Long collecteurId, Pageable pageable) {
        log.info("üìã R√©cup√©ration pagin√©e des journaux pour collecteur: {}", collecteurId);

        try {
            // R√©cup√©rer les journaux avec pagination
            Page<Journal> journauxPage = journalRepository.findByCollecteurId(collecteurId, pageable);

            // Convertir en DTO
            return journauxPage.map(journal -> JournalDTO.builder()
                    .id(journal.getId())
                    .collecteurId(journal.getCollecteur().getId())
                    .dateDebut(journal.getDateDebut())
                    .dateFin(journal.getDateFin())
                    .statut(journal.getStatut())
                    .estCloture(journal.isEstCloture())
                    .reference(journal.getReference())
                    .build());

        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des journaux pagin√©s: {}", e.getMessage(), e);
            throw new RuntimeException("Erreur r√©cup√©ration journaux: " + e.getMessage(), e);
        }
    }
}