package org.example.collectfocep.services.impl;

import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.services.interfaces.DateTimeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;

import java.time.LocalDateTime;

@Service
@Slf4j
public class TransactionService {

    private final TransactionTemplate transactionTemplate;
    private final DateTimeService dateTimeService;

    @Autowired
    public TransactionService(
            PlatformTransactionManager transactionManager,
            DateTimeService dateTimeService) {
        this.transactionTemplate = new TransactionTemplate(transactionManager);
        this.dateTimeService = dateTimeService;
    }

    /**
     * ‚úÖ CORRECTION: Ex√©cute une action dans une transaction avec logging am√©lior√©
     */
    public <T> T executeInTransaction(TransactionCallback<T> action) {
        LocalDateTime startTime = dateTimeService.getCurrentDateTime();
        String transactionId = generateTransactionId();

        log.info("üîÑ [{}] D√©but transaction √† {}", transactionId, startTime);

        try {
            T result = transactionTemplate.execute(action);

            LocalDateTime endTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, endTime).toMillis();

            log.info("‚úÖ [{}] Transaction r√©ussie en {}ms (fin: {})",
                    transactionId, durationMs, endTime);

            return result;
        } catch (Exception e) {
            LocalDateTime errorTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, errorTime).toMillis();

            log.error("‚ùå [{}] Erreur transaction apr√®s {}ms: {}",
                    transactionId, durationMs, e.getMessage(), e);
            throw e;
        }
        // ‚úÖ SUPPRESSION du finally qui r√©f√©ren√ßait originalPropagation non d√©clar√©e
    }

    /**
     * ‚úÖ NOUVELLE M√âTHODE: Ex√©cute une action dans une nouvelle transaction
     */
    public <T> T executeInNewTransaction(TransactionCallback<T> action) {
        LocalDateTime startTime = dateTimeService.getCurrentDateTime();
        String transactionId = generateTransactionId() + "-NEW";

        log.info("üîÑ [{}] D√©but nouvelle transaction √† {}", transactionId, startTime);

        int originalPropagation = transactionTemplate.getPropagationBehavior();
        try {
            // Configurer pour une nouvelle transaction
            transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);

            T result = transactionTemplate.execute(action);

            LocalDateTime endTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, endTime).toMillis();

            log.info("‚úÖ [{}] Nouvelle transaction r√©ussie en {}ms (fin: {})",
                    transactionId, durationMs, endTime);

            return result;
        } catch (Exception e) {
            LocalDateTime errorTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, errorTime).toMillis();

            log.error("‚ùå [{}] Erreur nouvelle transaction apr√®s {}ms: {}",
                    transactionId, durationMs, e.getMessage(), e);
            throw e;
        } finally {
            // Restaurer la propagation d'origine
            transactionTemplate.setPropagationBehavior(originalPropagation);
        }
    }

    /**
     * ‚úÖ M√âTHODE: Ex√©cute une transaction avec timeout personnalis√©
     */
    public <T> T executeInTransactionWithTimeout(TransactionCallback<T> action, int timeoutSeconds) {
        LocalDateTime startTime = dateTimeService.getCurrentDateTime();
        String transactionId = generateTransactionId() + "-TIMEOUT";

        log.info("üîÑ [{}] D√©but transaction avec timeout {}s √† {}",
                transactionId, timeoutSeconds, startTime);

        int originalTimeout = transactionTemplate.getTimeout();
        try {
            transactionTemplate.setTimeout(timeoutSeconds);

            T result = transactionTemplate.execute(action);

            LocalDateTime endTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, endTime).toMillis();

            log.info("‚úÖ [{}] Transaction avec timeout r√©ussie en {}ms (fin: {})",
                    transactionId, durationMs, endTime);

            return result;
        } catch (Exception e) {
            LocalDateTime errorTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, errorTime).toMillis();

            log.error("‚ùå [{}] Erreur transaction avec timeout apr√®s {}ms: {}",
                    transactionId, durationMs, e.getMessage(), e);
            throw e;
        } finally {
            // Restaurer le timeout d'origine
            transactionTemplate.setTimeout(originalTimeout);
        }
    }

    /**
     * ‚úÖ M√âTHODE: Ex√©cute une transaction en lecture seule
     */
    public <T> T executeInReadOnlyTransaction(TransactionCallback<T> action) {
        LocalDateTime startTime = dateTimeService.getCurrentDateTime();
        String transactionId = generateTransactionId() + "-RO";

        log.info("üîÑ [{}] D√©but transaction lecture seule √† {}", transactionId, startTime);

        boolean originalReadOnly = transactionTemplate.isReadOnly();
        try {
            transactionTemplate.setReadOnly(true);

            T result = transactionTemplate.execute(action);

            LocalDateTime endTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, endTime).toMillis();

            log.info("‚úÖ [{}] Transaction lecture seule r√©ussie en {}ms (fin: {})",
                    transactionId, durationMs, endTime);

            return result;
        } catch (Exception e) {
            LocalDateTime errorTime = dateTimeService.getCurrentDateTime();
            long durationMs = java.time.Duration.between(startTime, errorTime).toMillis();

            log.error("‚ùå [{}] Erreur transaction lecture seule apr√®s {}ms: {}",
                    transactionId, durationMs, e.getMessage(), e);
            throw e;
        } finally {
            // Restaurer le mode lecture/√©criture d'origine
            transactionTemplate.setReadOnly(originalReadOnly);
        }
    }

    /**
     * V√©rifie si une transaction est active
     */
    public boolean isTransactionActive() {
        try {
            return org.springframework.transaction.support.TransactionSynchronizationManager.isActualTransactionActive();
        } catch (Exception e) {
            log.debug("Erreur lors de la v√©rification du statut de transaction: {}", e.getMessage());
            return false;
        }
    }

    /**
     * Obtient le nom de la transaction courante
     */
    public String getCurrentTransactionName() {
        try {
            return org.springframework.transaction.support.TransactionSynchronizationManager.getCurrentTransactionName();
        } catch (Exception e) {
            log.debug("Erreur lors de la r√©cup√©ration du nom de transaction: {}", e.getMessage());
            return "UNKNOWN";
        }
    }

    /**
     * Log des informations de transaction
     */
    public void logTransactionInfo() {
        try {
            boolean isActive = isTransactionActive();
            String name = getCurrentTransactionName();
            boolean isReadOnly = org.springframework.transaction.support.TransactionSynchronizationManager.isCurrentTransactionReadOnly();

            log.info("üìä Transaction Info - Active: {}, Nom: {}, Lecture seule: {}, Timestamp: {}",
                    isActive, name, isReadOnly, dateTimeService.getCurrentDateTime());
        } catch (Exception e) {
            log.debug("Erreur lors du logging des infos de transaction: {}", e.getMessage());
        }
    }

    /**
     * G√©n√®re un ID unique pour le suivi des transactions
     */
    private String generateTransactionId() {
        return "TXN-" + System.currentTimeMillis() + "-" +
                Thread.currentThread().getId() + "-" +
                Integer.toHexString(System.identityHashCode(this)).substring(0, 4).toUpperCase();
    }

    /**
     * Configure le timeout par d√©faut des transactions
     */
    public void setDefaultTimeout(int timeoutSeconds) {
        transactionTemplate.setTimeout(timeoutSeconds);
        log.info("‚öôÔ∏è Timeout de transaction configur√© √† {}s √† {}",
                timeoutSeconds, dateTimeService.getCurrentDateTime());
    }

    /**
     * Configure le niveau d'isolation par d√©faut
     */
    public void setDefaultIsolationLevel(int isolationLevel) {
        transactionTemplate.setIsolationLevel(isolationLevel);
        log.info("‚öôÔ∏è Niveau d'isolation configur√© √† {} √† {}",
                isolationLevel, dateTimeService.getCurrentDateTime());
    }

    /**
     * Configure le comportement de propagation par d√©faut
     */
    public void setDefaultPropagationBehavior(int propagationBehavior) {
        transactionTemplate.setPropagationBehavior(propagationBehavior);
        log.info("‚öôÔ∏è Comportement de propagation configur√© √† {} √† {}",
                propagationBehavior, dateTimeService.getCurrentDateTime());
    }

    /**
     * Affiche les statistiques d'utilisation des transactions
     */
    public void logTransactionStats() {
        log.info("üìà Stats Transaction √† {} - Template: {}",
                dateTimeService.getCurrentDateTime(), transactionTemplate.toString());
    }

    /**
     * Teste la connectivit√© de la base de donn√©es dans une transaction
     */
    public boolean testDatabaseConnectivity() {
        try {
            return executeInReadOnlyTransaction(status -> {
                log.info("üîç Test connectivit√© DB √† {}", dateTimeService.getCurrentDateTime());
                // Le simple fait d'ex√©cuter cette transaction teste la connectivit√©
                return true;
            });
        } catch (Exception e) {
            log.error("‚ùå √âchec test connectivit√© DB √† {}: {}",
                    dateTimeService.getCurrentDateTime(), e.getMessage());
            return false;
        }
    }
}