package org.example.collectfocep.services;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.collectfocep.dto.ValidationResult;
import org.example.collectfocep.dto.TransactionPreValidationDTO;
import org.example.collectfocep.entities.Client;
import org.example.collectfocep.repositories.ClientRepository;
import org.example.collectfocep.exceptions.ResourceNotFoundException;
import org.springframework.stereotype.Service;

/**
 * Service de validation des transactions avant ex√©cution
 * Int√®gre toutes les validations m√©tier n√©cessaires
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class TransactionValidationService {

    private final ClientRepository clientRepository;
    private final SoldeCollecteurValidationService soldeCollecteurValidationService;

    /**
     * üìã Validation compl√®te avant √©pargne
     */
    public TransactionPreValidationDTO validateEpargne(Long clientId, Long collecteurId, Double montant) {
        log.info("üìã Validation √©pargne: client={}, collecteur={}, montant={}",
                clientId, collecteurId, montant);

        try {
            // 1. R√©cup√©rer le client
            Client client = clientRepository.findById(clientId)
                    .orElseThrow(() -> new ResourceNotFoundException("Client non trouv√©"));

            // 2. V√©rifier le t√©l√©phone
            Boolean hasPhone = hasValidPhone(client);

            return TransactionPreValidationDTO.builder()
                    .canProceed(true)
                    .clientId(clientId)
                    .clientName(String.format("%s %s", client.getPrenom(), client.getNom()))
                    .numeroCompte(client.getNumeroCompte())
                    .hasValidPhone(hasPhone)
                    .phoneWarningMessage(hasPhone ? null :
                            "Ce client n'a pas de num√©ro de t√©l√©phone renseign√©. Voulez-vous continuer ?")
                    .soldeCollecteurSuffisant(true) // Pas de v√©rification pour √©pargne
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Erreur validation √©pargne: {}", e.getMessage(), e);
            return TransactionPreValidationDTO.builder()
                    .canProceed(false)
                    .errorMessage("Erreur lors de la validation: " + e.getMessage())
                    .build();
        }
    }

    /**
     * üìã Validation compl√®te avant retrait
     */
    public TransactionPreValidationDTO validateRetrait(Long clientId, Long collecteurId, Double montant) {
        log.info("üìã Validation retrait: client={}, collecteur={}, montant={}",
                clientId, collecteurId, montant);

        try {
            // 1. R√©cup√©rer le client
            Client client = clientRepository.findById(clientId)
                    .orElseThrow(() -> new ResourceNotFoundException("Client non trouv√©"));

            // 2. V√©rifier le t√©l√©phone
            Boolean hasPhone = hasValidPhone(client);

            // 3. ‚úÖ VALIDATION SOLDE COLLECTEUR (service existant) - CORRIG√â
            ValidationResult soldeValidation = soldeCollecteurValidationService
                    .validateRetraitPossible(collecteurId, montant);

            return TransactionPreValidationDTO.builder()
                    .canProceed(soldeValidation.isSuccess()) // ‚úÖ CORRIG√â: isSuccess() au lieu de isValid()
                    .clientId(clientId)
                    .clientName(String.format("%s %s", client.getPrenom(), client.getNom()))
                    .numeroCompte(client.getNumeroCompte())
                    .hasValidPhone(hasPhone)
                    .phoneWarningMessage(hasPhone ? null :
                            "Ce client n'a pas de num√©ro de t√©l√©phone renseign√©. Voulez-vous continuer ?")
                    .soldeCollecteurSuffisant(soldeValidation.isSuccess()) // ‚úÖ CORRIG√â
                    .soldeCollecteurMessage(soldeValidation.isSuccess() ? null : soldeValidation.getMessage()) // ‚úÖ CORRIG√â
                    .errorMessage(soldeValidation.isSuccess() ? null : soldeValidation.getMessage()) // ‚úÖ CORRIG√â
                    .build();

        } catch (Exception e) {
            log.error("‚ùå Erreur validation retrait: {}", e.getMessage(), e);
            return TransactionPreValidationDTO.builder()
                    .canProceed(false)
                    .errorMessage("Erreur lors de la validation: " + e.getMessage())
                    .build();
        }
    }

    /**
     * üìû V√©rifier uniquement le t√©l√©phone d'un client
     */
    public Boolean clientHasValidPhone(Long clientId) {
        try {
            Client client = clientRepository.findById(clientId)
                    .orElseThrow(() -> new ResourceNotFoundException("Client non trouv√©"));
            return hasValidPhone(client);
        } catch (Exception e) {
            log.error("‚ùå Erreur v√©rification t√©l√©phone client {}: {}", clientId, e.getMessage());
            return false;
        }
    }

    /**
     * ‚úÖ NOUVEAU : M√©thode utilitaire priv√©e pour v√©rifier si un client a un t√©l√©phone valide
     * √âvite d'utiliser clientRepository.hasValidPhone() qui pourrait ne pas exister
     */
    private Boolean hasValidPhone(Client client) {
        return client.getTelephone() != null && !client.getTelephone().trim().isEmpty();
    }
}